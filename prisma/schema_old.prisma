// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  phone     String?
  address   String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  accounts  Account[]
  sessions  Session[]
  cartItems CartItem[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Float
  image       String?
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  ingredients String?
  weight      String?
  available   Boolean     @default(true)
  featured    Boolean     @default(false)
  discount    Float?      @default(0)
  orderItems  OrderItem[]
  cartItems   CartItem[]
  stockItems  StockItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model StockItem {
  id              String    @id @default(cuid())
  productId       String
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity        Int       @default(0)
  unit            String    @default("шт")
  grossWeight     Float?    // Вес брутто (с упаковкой)
  netWeight       Float?    // Вес нетто (без упаковки)
  purchasePrice   Float?    // Закупочная цена
  supplier        String?   // Поставщик
  expiryDate      DateTime? // Срок годности
  receivedDate    DateTime  @default(now()) // Дата прихода
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model StockMovement {
  id          String           @id @default(cuid())
  type        StockMovementType
  productName String
  quantity    Int
  unit        String           @default("шт")
  price       Float?
  supplier    String?
  notes       String?
  createdBy   String?
  createdAt   DateTime         @default(now())
}

enum StockMovementType {
  ARRIVAL    // Приход
  WRITE_OFF  // Списание
  RETURN     // Возврат
  ADJUSTMENT // Корректировка
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  status          OrderStatus @default(PENDING)
  total           Float
  subtotal        Float
  deliveryFee     Float       @default(0)
  deliveryAddress String
  phone           String
  email           String?
  notes           String?
  paymentMethod   PaymentMethod @default(CASH)
  paymentStatus   PaymentStatus @default(PENDING)
  estimatedDelivery DateTime?
  orderItems      OrderItem[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
}

enum Role {
  USER
  ADMIN
}

enum PaymentMethod {
  CASH
  CARD
  ONLINE
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERING
  DELIVERED
  CANCELLED
}
